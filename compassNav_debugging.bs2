' {$STAMP BS2}
' {$PBASIC 2.5}

SDA            PIN      0          ' SDA of gyro to pin P0
SCL            PIN      1          ' SCL of gyro to pin P1

WRITE_Data     CON     $3C         ' Requests Write operation
READ_Data      CON     $3D         ' Requests Read operation
MODE           CON     $02         ' Mode setting register
X_MSB          CON     $03         ' X MSB data output register

X              VAR      Word
Y              VAR      Word
Z              VAR      Word
rawl           VAR      Word
rawh           VAR      Word
heading        VAR      Z           'north heading is between 296 and 299
CmConstant     CON      2260
cmDistance     VAR      Word
time           VAR      Word



' Variables for I2C communications
I2C_DATA       VAR      Byte
I2C_LSB        VAR      Bit
I2C_REG        VAR      Byte
I2C_VAL        VAR      Byte



PAUSE 100                                   ' Power up delay
I2C_REG = MODE                              ' Set operating mode to continuous
I2C_VAL = $0
GOSUB I2C_Write_Reg

DO
  GOSUB GetRawReading
  GOSUB GetHeading
  GOSUB ObstAvoidance                       ' Get raw Compass reading
  DEBUG HOME, "X = ",11, SDEC x, CR         ' Print values
  DEBUG       "Y = ",11, SDEC y, CR
  DEBUG       "Z = ",11, SDEC z, CR
  DEBUG       "heading=",11, SDEC heading, CR
  DEBUG       "Obst Distance",11,SDEC cmDistance,CR
  DEBUG CR
LOOP

GetRawReading:
  PAUSE 400                                 ' Wait for new data

  ' Send request to X MSB register
  GOSUB I2C_Start
  I2C_DATA = WRITE_Data
  GOSUB I2C_Write
  I2C_DATA = X_MSB
  GOSUB I2C_Write
  GOSUB I2C_Stop

  'Get data from register (6 bytes total, 2 bytes per axis)
  GOSUB I2C_Start
  I2C_DATA = READ_Data
  GOSUB I2C_Write

  ' Get X
  GOSUB I2C_Read
  rawH = I2C_Data
  GOSUB I2C_ACK
  GOSUB I2C_Read
  rawL = I2C_Data
  GOSUB I2C_ACK
  X = (rawH << 8) | rawL


  ' Get Z
  GOSUB I2C_Read
  rawH = I2C_Data
  GOSUB I2C_ACK
  GOSUB I2C_Read
  rawL = I2C_Data
  GOSUB I2C_ACK
  Z = (rawH << 8) | rawL

  ' Get Y
  GOSUB I2C_Read
  rawH = I2C_Data
  GOSUB I2C_ACK
  GOSUB I2C_Read
  rawL = I2C_Data
  GOSUB I2C_NACK
  Y = (rawH << 8) | rawL

  GOSUB I2C_Stop

RETURN


'---------I2C functions------------
' Set I2C_REG & I2C_VAL before calling this
I2C_Write_Reg:
  GOSUB I2C_Start
  I2C_DATA = WRITE_DATA
  GOSUB I2C_Write
  I2C_DATA = I2C_REG
  GOSUB I2C_Write
  I2C_DATA = I2C_VAL
  GOSUB I2C_Write
  GOSUB I2C_Stop
RETURN

' Set I2C_REG before calling this, I2C_DATA will have result
I2C_Read_Reg:
  GOSUB I2C_Start
  I2C_DATA = WRITE_DATA
  GOSUB I2C_Write
  I2C_DATA = I2C_REG
  GOSUB I2C_Write
  GOSUB I2C_Stop
  GOSUB I2C_Start
  I2C_DATA = READ_DATA
  GOSUB I2C_Write
  GOSUB I2C_Read
  GOSUB I2C_NACK
  GOSUB I2C_Stop
RETURN

I2C_Start:
  LOW SDA
  LOW SCL
RETURN

I2C_Stop:
  LOW   SDA
  INPUT SCL
  INPUT SDA
RETURN

I2C_ACK:
  LOW   SDA
  INPUT SCL
  LOW   SCL
  INPUT SDA
RETURN

I2C_NACK:
  INPUT SDA
  INPUT SCL
  LOW   SCL
RETURN

I2C_Read:
  SHIFTIN SDA, SCL, MSBPRE, [I2C_DATA]
RETURN

I2C_Write:
  I2C_LSB = I2C_DATA.BIT0
  I2C_DATA = I2C_DATA / 2
  SHIFTOUT SDA, SCL, MSBFIRST, [I2C_DATA\7]
  IF I2C_LSB THEN INPUT SDA ELSE LOW SDA
  INPUT SCL
  LOW SCL
  INPUT SDA
  INPUT SCL
  LOW SCL
RETURN

GetHeading:
      IF(x<0)THEN
        heading = 180 - (y ATN x)
        'deg = heading */360
      ELSEIF(x>0 AND y<0)THEN
        heading= -1*(x ATN y)
        'deg = heading */360
      ELSEIF(x>0 AND y>0)THEN
        heading=360-( x ATN y)
        'deg = heading */360
      ELSEIF(x=0 AND y<0)THEN
          heading=90
      ELSEIF(x=0 AND y>0)THEN
          heading=270
      ENDIF

RETURN

ObstAvoidance:

  PULSOUT 15, 5
  PULSIN 15, 1, time

  cmDistance = cmConstant ** time

  DEBUG HOME, DEC3 cmDistance, " cm"

  PAUSE 100

return